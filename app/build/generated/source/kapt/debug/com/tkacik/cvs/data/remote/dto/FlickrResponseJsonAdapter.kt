// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.tkacik.cvs.`data`.remote.dto

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

public class FlickrResponseJsonAdapter(
  moshi: Moshi
) : JsonAdapter<FlickrResponse>() {
  private val options: JsonReader.Options = JsonReader.Options.of("title", "link", "description",
      "modified", "generation", "items")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "title")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "generation")

  private val listOfFlickrImageAdapter: JsonAdapter<List<FlickrImage>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, FlickrImage::class.java),
      emptySet(), "items")

  public override fun toString(): String = buildString(36) {
      append("GeneratedJsonAdapter(").append("FlickrResponse").append(')') }

  public override fun fromJson(reader: JsonReader): FlickrResponse {
    var title: String? = null
    var link: String? = null
    var description: String? = null
    var modified: String? = null
    var generation: String? = null
    var items: List<FlickrImage>? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> title = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("title", "title",
            reader)
        1 -> link = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("link", "link",
            reader)
        2 -> description = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("description", "description", reader)
        3 -> modified = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("modified",
            "modified", reader)
        4 -> generation = nullableStringAdapter.fromJson(reader)
        5 -> items = listOfFlickrImageAdapter.fromJson(reader) ?: throw Util.unexpectedNull("items",
            "items", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return FlickrResponse(
        title = title ?: throw Util.missingProperty("title", "title", reader),
        link = link ?: throw Util.missingProperty("link", "link", reader),
        description = description ?: throw Util.missingProperty("description", "description",
            reader),
        modified = modified ?: throw Util.missingProperty("modified", "modified", reader),
        generation = generation,
        items = items ?: throw Util.missingProperty("items", "items", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: FlickrResponse?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("title")
    stringAdapter.toJson(writer, value_.title)
    writer.name("link")
    stringAdapter.toJson(writer, value_.link)
    writer.name("description")
    stringAdapter.toJson(writer, value_.description)
    writer.name("modified")
    stringAdapter.toJson(writer, value_.modified)
    writer.name("generation")
    nullableStringAdapter.toJson(writer, value_.generation)
    writer.name("items")
    listOfFlickrImageAdapter.toJson(writer, value_.items)
    writer.endObject()
  }
}
