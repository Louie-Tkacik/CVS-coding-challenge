// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.tkacik.cvs.`data`.remote.dto

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class FlickrImageJsonAdapter(
  moshi: Moshi
) : JsonAdapter<FlickrImage>() {
  private val options: JsonReader.Options = JsonReader.Options.of("title", "link", "media",
      "date_taken", "description", "published", "author", "author_id", "tags")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "title")

  private val mediaAdapter: JsonAdapter<Media> = moshi.adapter(Media::class.java, emptySet(),
      "media")

  public override fun toString(): String = buildString(33) {
      append("GeneratedJsonAdapter(").append("FlickrImage").append(')') }

  public override fun fromJson(reader: JsonReader): FlickrImage {
    var title: String? = null
    var link: String? = null
    var media: Media? = null
    var dateTaken: String? = null
    var description: String? = null
    var published: String? = null
    var author: String? = null
    var authorId: String? = null
    var tags: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> title = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("title", "title",
            reader)
        1 -> link = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("link", "link",
            reader)
        2 -> media = mediaAdapter.fromJson(reader) ?: throw Util.unexpectedNull("media", "media",
            reader)
        3 -> dateTaken = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("dateTaken",
            "date_taken", reader)
        4 -> description = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("description", "description", reader)
        5 -> published = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("published",
            "published", reader)
        6 -> author = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("author",
            "author", reader)
        7 -> authorId = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("authorId",
            "author_id", reader)
        8 -> tags = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("tags", "tags",
            reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return FlickrImage(
        title = title ?: throw Util.missingProperty("title", "title", reader),
        link = link ?: throw Util.missingProperty("link", "link", reader),
        media = media ?: throw Util.missingProperty("media", "media", reader),
        dateTaken = dateTaken ?: throw Util.missingProperty("dateTaken", "date_taken", reader),
        description = description ?: throw Util.missingProperty("description", "description",
            reader),
        published = published ?: throw Util.missingProperty("published", "published", reader),
        author = author ?: throw Util.missingProperty("author", "author", reader),
        authorId = authorId ?: throw Util.missingProperty("authorId", "author_id", reader),
        tags = tags ?: throw Util.missingProperty("tags", "tags", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: FlickrImage?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("title")
    stringAdapter.toJson(writer, value_.title)
    writer.name("link")
    stringAdapter.toJson(writer, value_.link)
    writer.name("media")
    mediaAdapter.toJson(writer, value_.media)
    writer.name("date_taken")
    stringAdapter.toJson(writer, value_.dateTaken)
    writer.name("description")
    stringAdapter.toJson(writer, value_.description)
    writer.name("published")
    stringAdapter.toJson(writer, value_.published)
    writer.name("author")
    stringAdapter.toJson(writer, value_.author)
    writer.name("author_id")
    stringAdapter.toJson(writer, value_.authorId)
    writer.name("tags")
    stringAdapter.toJson(writer, value_.tags)
    writer.endObject()
  }
}
