// Generated by Dagger (https://dagger.dev).
package com.tkacik.cvs.di;

import com.tkacik.cvs.data.remote.datasource.FlickrSearchRemoteDataSource;
import com.tkacik.cvs.data.remote.service.FlickrService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DataSourceModule_ProvidesFlickrSearchRemoteDataSourceFactory implements Factory<FlickrSearchRemoteDataSource> {
  private final Provider<FlickrService> flickrServiceProvider;

  public DataSourceModule_ProvidesFlickrSearchRemoteDataSourceFactory(
      Provider<FlickrService> flickrServiceProvider) {
    this.flickrServiceProvider = flickrServiceProvider;
  }

  @Override
  public FlickrSearchRemoteDataSource get() {
    return providesFlickrSearchRemoteDataSource(flickrServiceProvider.get());
  }

  public static DataSourceModule_ProvidesFlickrSearchRemoteDataSourceFactory create(
      Provider<FlickrService> flickrServiceProvider) {
    return new DataSourceModule_ProvidesFlickrSearchRemoteDataSourceFactory(flickrServiceProvider);
  }

  public static FlickrSearchRemoteDataSource providesFlickrSearchRemoteDataSource(
      FlickrService flickrService) {
    return Preconditions.checkNotNullFromProvides(DataSourceModule.INSTANCE.providesFlickrSearchRemoteDataSource(flickrService));
  }
}
