// Generated by Dagger (https://dagger.dev).
package com.tkacik.cvs.data.repository;

import com.tkacik.cvs.data.local.datasource.FlickrSearchLocalDataSource;
import com.tkacik.cvs.data.remote.datasource.FlickrSearchRemoteDataSource;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class FlickrRepository_Factory implements Factory<FlickrRepository> {
  private final Provider<FlickrSearchLocalDataSource> localDataSourceProvider;

  private final Provider<FlickrSearchRemoteDataSource> remoteDataSourceProvider;

  public FlickrRepository_Factory(Provider<FlickrSearchLocalDataSource> localDataSourceProvider,
      Provider<FlickrSearchRemoteDataSource> remoteDataSourceProvider) {
    this.localDataSourceProvider = localDataSourceProvider;
    this.remoteDataSourceProvider = remoteDataSourceProvider;
  }

  @Override
  public FlickrRepository get() {
    return newInstance(localDataSourceProvider.get(), remoteDataSourceProvider.get());
  }

  public static FlickrRepository_Factory create(
      Provider<FlickrSearchLocalDataSource> localDataSourceProvider,
      Provider<FlickrSearchRemoteDataSource> remoteDataSourceProvider) {
    return new FlickrRepository_Factory(localDataSourceProvider, remoteDataSourceProvider);
  }

  public static FlickrRepository newInstance(FlickrSearchLocalDataSource localDataSource,
      FlickrSearchRemoteDataSource remoteDataSource) {
    return new FlickrRepository(localDataSource, remoteDataSource);
  }
}
